# Jupyter Notebook for a Perceptron demo.
# Copyright (C) 2023 Ronny Standtke <ronny.standtke@gmx.net>
# This file is distributed under the same license as the Jupyter Perceptron package.
# Ronny Standtke <ronny.standtke@gmx.net>, 2023
#
msgid ""
msgstr ""
"Project-Id-Version: 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-22 18:28+0100\n"
"PO-Revision-Date: 2023-10-27 15:55+0200\n"
"Last-Translator: Ronny Standtke <ronny.standtke@gmx.net>\n"
"Language-Team: DE <DE@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Perceptron.py:54
msgid ""
"\n"
"            <p>In the past, we typically used a programming language such as "
"C,\n"
"            Java or Python to solve problems with computers, using explicit\n"
"            commands to create the data structures, algorithms, functions "
"and\n"
"            ultimately executable programs required for the solution. This\n"
"            approach can be used to create excellent solutions in many "
"areas.\n"
"            However, in complex situations, such as large amounts of data "
"or\n"
"            dynamically changing environments, we reach the limits of\n"
"            conventional programming, e.g. in speech recognition, "
"autonomous\n"
"            driving or medical diagnostics.</p>\n"
"            "
msgstr ""
"\n"
"            <p>Um Aufgaben mit Computern zu lösen, haben wir in der "
"Vergangenheit typischerweise eine Programmiersprache wie z.B. C, Java oder "
"Python verwendet, um mit expliziten Befehlen die zur Lösung notwendigen "
"Datenstrukturen, Algorithmen, Funktionen und schlussendlich ausführbaren "
"Programme zu erstellen. Mit dieser Herangehensweise lassen sich in vielen "
"Bereichen hervorragende Lösungen erstellen. Dennoch stossen wir in komplexen "
"Situationen, wie bei grossen Datenmengen oder sich dynamisch ändernden "
"Umgebungen, an die Grenzen herkömmlicher Programmierung, z.B. bei "
"Spracherkennung, autonomem Fahren oder medizinischen Diagnosen.</p>\n"
"            "

#: ../Perceptron.py:236
msgid ""
"\n"
"            <h1>Training</h1>\n"
"            In this area the perceptron can be trained:\n"
"            <ol>\n"
"                <li>\n"
"                    Select the checkboxes for the combinations you consider "
"a\n"
"                    nice day in the rightmost column.\n"
"                </li>\n"
"                <li>Press the start button to start the learning process.</"
"li>\n"
"                <li>\n"
"                    Press the \"Finalize Epoch\" button to continue "
"learning\n"
"                    until the current epoch is finished.\n"
"                </li>\n"
"                <li>\n"
"                    Press the \"Reset\" button to reset the learning "
"process.\n"
"                </li>\n"
"            </ol>\n"
"            "
msgstr ""
"\n"
"            <h1>Training</h1>\n"
"            In diesem Bereich kann das Perzeptron trainiert werden:\n"
"            <ol>\n"
"                <li>\n"
"                    Wählen Sie in der rechten Spalte die Checkboxen für die "
"Kombinationen, die Sie für schöne Tage halten.                 </li>\n"
"                <li>Drücken Sie den Startknopf, um den Lernprozess zu "
"starten.</li>\n"
"                <li>\n"
"                    Drücken Sie den Knopf \"Epoche abschliessen\", um so "
"lange zu lernen, bis die aktuelle Epoche abgeschlossen wurde.                "
"</li>\n"
"                <li>\n"
"                    Drücken Sie den Knopf \"Zurücksetzen\", um den "
"Lernprozess zurückzusetzen.                </li>\n"
"            </ol>\n"
"            "

#: ../Perceptron.py:334
msgid "Finalize Epoch"
msgstr "Epoche abschliessen"
